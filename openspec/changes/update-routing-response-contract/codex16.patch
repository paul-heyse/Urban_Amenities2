 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF'
diff --git a/openspec/changes/add-cli-config-test-coverage/tasks.md b/openspec/changes/add-cli-config-test-coverage/tasks.md
index 6fbf58c16f3666b7659c2e170336aeebf649be54..78f1be5deabf440912c5ec268d0239c75406a534 100644
--- a/openspec/changes/add-cli-config-test-coverage/tasks.md
+++ b/openspec/changes/add-cli-config-test-coverage/tasks.md
@@ -84,53 +84,53 @@
     - [x] Exit code non-zero
   - [x] Test invalid file paths:
     - [x] `score essentials --input nonexistent.parquet` → file not found error
     - [x] Clear error message with path
   - [ ] Test conflicting options:
     - [ ] `aggregate --input scores/ --format csv --output file.parquet` → extension mismatch warning
   - [ ] Test keyboard interrupt handling:
     - [ ] Simulate Ctrl+C during long operation → graceful shutdown

 ## 4. Configuration Loader Testing (High Priority)

 - [x] 4.1 Create `tests/config/test_loader.py`
   - [x] Test loading valid YAML:

     ```yaml
     # tests/fixtures/configs/valid.yaml
     accessibility:
       vot_weekday: 18.0
       vot_weekend: 15.0
     scoring:
       ea_threshold: 30.0
     ```

     - [x] All parameters parsed
     - [x] Types correct (float, int, etc.)
-  - [x] Test malformed YAML:
+- [x] Test malformed YAML:
     - [x] Invalid syntax → `yaml.YAMLError` with line number
-    - [ ] Tab/space mixing → parsing error
+    - [x] Tab/space mixing → parsing error
   - [x] Test missing required sections:
     - [x] Config without `scoring` section → error
     - [x] Clear message: "Required section 'scoring' missing"
   - [ ] Test unknown parameters (strict mode):
     - [x] Extra param `unknown_param` → validation error
     - [ ] Warning mode: log warning, ignore parameter

 - [x] 4.2 Test parameter merging:

   ```python
   base_config = load_config("base.yaml")
   override_config = load_config("override.yaml")
   merged = merge_configs(base_config, override_config)
   assert merged.accessibility.vot_weekday == override_value
   ```

   - [x] Override values replace base values
   - [ ] Non-overridden values preserved from base
   - [ ] Nested dict merging works correctly

 - [x] 4.3 Test environment variable overrides:

   ```bash
   export AUCS_VOT_WEEKDAY=20.0
   ```
@@ -210,98 +210,98 @@
     params2 = AccessibilityParams.from_yaml(yaml_str)
     assert params1 == params2
     ```

 - [ ] 5.3 Test parameter defaults:
   - [x] All optional parameters have defaults
   - [ ] Defaults match documented values in specs
   - [ ] Defaults produce sensible scores (smoke test)

 - [ ] 5.4 Test parameter versioning:
   - [ ] Version field populated in all models
   - [ ] Hash generation for reproducibility:

     ```python
     params = AccessibilityParams(...)
     hash1 = params.compute_hash()
     # Modify param
     params.vot_weekday = 20.0
     hash2 = params.compute_hash()
     assert hash1 != hash2
     ```

 ## 6. Golden Configuration Files

 - [ ] 6.1 Create golden config files in `tests/fixtures/configs/`:
-  - [ ] `golden_v1.yaml` - Full config with all parameters (version 1.0)
-  - [ ] `golden_v2.yaml` - Updated config (version 2.0)
+  - [x] `golden_v1.yaml` - Full config with all parameters (version 1.0)
+  - [x] `golden_v2.yaml` - Updated config (version 2.0)
   - [x] `minimal.yaml` - Minimal valid config
   - [x] `invalid_type.yaml` - Config with type error
   - [ ] `invalid_range.yaml` - Config with out-of-range value
   - [ ] `missing_required.yaml` - Config missing required section

-- [ ] 6.2 Test golden configs:
+- [x] 6.2 Test golden configs:

   ```python
   def test_golden_v1_loads_correctly():
       params = load_config("tests/fixtures/configs/golden_v1.yaml")
       assert params.accessibility.vot_weekday == 18.0
       assert params.scoring.ea.threshold == 30.0
       # ... test all expected values
   ```

 ## 7. CLI Integration Testing

 - [ ] 7.1 Create `tests/cli/test_cli_integration.py`
   - [ ] Test full pipeline:

     ```bash
     # Step 1: Ingest
     cli ingest overture-places --output /tmp/places.parquet
     # Step 2: Score
     cli score essentials --input /tmp/places.parquet --output /tmp/ea.parquet
     # Step 3: Aggregate
     cli aggregate --input /tmp/ --output /tmp/aucs.parquet
     # Verify final output
     assert Path("/tmp/aucs.parquet").exists()
     df = pd.read_parquet("/tmp/aucs.parquet")
     assert "aucs" in df.columns
     ```

   - [ ] Test error propagation:
     - [ ] If `ingest` fails, `score` should not run
     - [ ] If `score` produces invalid output, `aggregate` should error

 ## 8. CLI Help and Documentation Testing

 - [ ] 8.1 Create `tests/cli/test_cli_help.py`
-  - [ ] Test `cli --help`:
-    - [ ] Help text displayed
-    - [ ] All commands listed
-  - [ ] Test `cli score --help`:
-    - [ ] Command description
-    - [ ] All options listed
+  - [x] Test `cli --help`:
+    - [x] Help text displayed
+    - [x] All commands listed
+  - [x] Test `cli score --help`:
+    - [x] Command description
+    - [x] All options listed
     - [ ] Examples provided

 ## 9. Configuration Utilities Testing

 - [ ] 9.1 Create `tests/config/test_config_utils.py`
   - [ ] Test parameter search by name:

     ```python
     results = search_parameters("vot")
     assert "vot_weekday" in results
     assert "vot_weekend" in results
     ```

   - [ ] Test configuration diff:

     ```python
     config1 = load_config("v1.yaml")
     config2 = load_config("v2.yaml")
     diff = config_diff(config1, config2)
     assert diff.changed == ["vot_weekday"]
     assert diff.added == ["new_param"]
     assert diff.removed == ["deprecated_param"]
     ```

 ## 10. Verification & Coverage Check
diff --git a/tests/cli/test_cli_help.py b/tests/cli/test_cli_help.py
new file mode 100644
index 0000000000000000000000000000000000000000..fa7632c465b66d2ed7ffad4aa6ed0c42842bc232
--- /dev/null
+++ b/tests/cli/test_cli_help.py
@@ -0,0 +1,23 @@
+from __future__ import annotations
+
+from typer.testing import CliRunner
+
+from Urban_Amenities2.cli.main import app
+
+
+def test_cli_main_help_lists_key_commands(cli_runner: CliRunner) -> None:
+    result = cli_runner.invoke(app, ["--help"])
+
+    assert result.exit_code == 0
+    stdout = result.stdout
+    for command in ["config", "ingest", "score", "aggregate", "export"]:
+        assert command in stdout
+
+
+def test_cli_score_help_lists_subcommands(cli_runner: CliRunner) -> None:
+    result = cli_runner.invoke(app, ["score", "--help"])
+
+    assert result.exit_code == 0
+    stdout = result.stdout
+    assert "Scoring commands" in stdout
+    assert "ea" in stdout
diff --git a/tests/config/test_loader.py b/tests/config/test_loader.py
index bbbb5214215c51e245ed0144ddcaa473779ec9fe..ba2f2eb2fafd8be939b6f303bbac3a195bedeeb2 100644
--- a/tests/config/test_loader.py
+++ b/tests/config/test_loader.py
@@ -112,25 +112,83 @@ def test_load_params_unknown_parameter(
     assert "extra input" in str(excinfo.value).lower()


 def test_load_params_missing_required_fixture(missing_required_config_file: Path) -> None:
     with pytest.raises(ParameterLoadError) as excinfo:
         load_params(missing_required_config_file)
     assert "subscores" in str(excinfo.value)


 def test_param_hash_changes_with_override(
     minimal_config_file: Path, tmp_path: Path, yaml_loader: YAML
 ) -> None:
     params, original_hash = load_params(minimal_config_file)
     override_data = {"grid": {"hex_size_m": params.grid.hex_size_m + 10}}
     override_path = tmp_path / "override.yml"
     with override_path.open("w", encoding="utf-8") as handle:
         yaml_loader.dump(override_data, handle)
     merged, _ = load_params(minimal_config_file, override=override_path)
     assert compute_param_hash(merged) != original_hash


 def test_load_and_document_includes_hash(minimal_config_file: Path) -> None:
     summary = load_and_document(minimal_config_file)
     assert "AUCS Parameters" in summary
     assert "hash:" in summary
+
+def test_load_params_requires_mapping(tmp_path: Path) -> None:
+    path = tmp_path / "list.yml"
+    path.write_text("- not a mapping", encoding="utf-8")
+
+    with pytest.raises(ParameterLoadError) as excinfo:
+        load_params(path)
+
+    assert "mapping" in str(excinfo.value)
+
+
+def test_load_params_env_nested_override(minimal_config_file: Path) -> None:
+    env = {"AUCS_categories__diversity__essentials__weight": "0.4"}
+
+    params, _ = load_params(minimal_config_file, env=env)
+
+    essentials_diversity = params.categories.diversity["essentials"]
+    assert essentials_diversity.weight == pytest.approx(0.4)
+
+
+def test_load_and_document_includes_derived_satiation(
+    minimal_config_file: Path, tmp_path: Path, yaml_loader: YAML
+) -> None:
+    data = yaml_loader.load(minimal_config_file.read_text())
+    data["categories"]["satiation_mode"] = "direct"
+    data["categories"]["satiation_kappa"] = 0.5
+    override = tmp_path / "override.yml"
+    with override.open("w", encoding="utf-8") as handle:
+        yaml_loader.dump(data, handle)
+
+    summary = load_and_document(override)
+
+    assert "Derived satiation kappas" in summary
+    assert "groceries" in summary
+
+
+def test_load_params_rejects_mixed_indentation(tmp_path: Path) -> None:
+    malformed = tmp_path / "malformed_tabs.yml"
+    malformed.write_text("grid:\n\thex_size_m: 250\n", encoding="utf-8")
+
+    with pytest.raises(ParameterLoadError) as excinfo:
+        load_params(malformed)
+
+    assert "Failed to parse" in str(excinfo.value)
+
+
+def test_golden_configs_load(minimal_config_file: Path, config_fixtures_dir: Path) -> None:
+    golden_v1 = config_fixtures_dir / "golden_v1.yml"
+    golden_v2 = config_fixtures_dir / "golden_v2.yml"
+
+    params_v1, hash_v1 = load_params(golden_v1)
+    params_v2, hash_v2 = load_params(golden_v2)
+
+    assert params_v1.grid.hex_size_m == 240
+    assert params_v1.compute.cache_dir == "cache/v1"
+    assert params_v2.grid.hex_size_m == 260
+    assert params_v2.compute.cache_dir == "cache/v2"
+    assert hash_v1 != hash_v2
diff --git a/tests/config/test_params_validation.py b/tests/config/test_params_validation.py
new file mode 100644
index 0000000000000000000000000000000000000000..b175fc1bd7705ce066c6c0b8432ea37d71bc4404
--- /dev/null
+++ b/tests/config/test_params_validation.py
@@ -0,0 +1,125 @@
+from __future__ import annotations
+
+from pathlib import Path
+
+import pytest
+
+from Urban_Amenities2.config.loader import load_params
+from Urban_Amenities2.config.params import (
+    AUCSParams,
+    CategoryConfig,
+    CategoryDiversityConfig,
+    CorridorConfig,
+    GridConfig,
+    HubsAirportsConfig,
+    LeisureCrossCategoryConfig,
+    SubscoreWeights,
+)
+
+
+def test_grid_config_requires_sorted_isochrones() -> None:
+    with pytest.raises(ValueError, match="sorted ascending"):
+        GridConfig(hex_size_m=200, isochrone_minutes=[10, 5], search_cap_minutes=15)
+
+
+def test_subscore_weights_must_total_100() -> None:
+    with pytest.raises(ValueError, match="total 100"):
+        SubscoreWeights(EA=20, LCA=20, MUHAA=20, JEA=10, MORR=10, CTE=10, SOU=5)
+
+
+def test_category_config_direct_requires_positive_kappa() -> None:
+    config = CategoryConfig(
+        essentials=["groceries"],
+        leisure=[],
+        ces_rho=0.5,
+        satiation_mode="direct",
+        satiation_kappa=-0.1,
+    )
+
+    with pytest.raises(ValueError, match="positive"):
+        config.derived_satiation()
+
+
+def test_category_config_anchor_requires_targets() -> None:
+    config = CategoryConfig(
+        essentials=["groceries"],
+        leisure=[],
+        ces_rho={"groceries": 0.5},
+        satiation_mode="anchor",
+    )
+
+    with pytest.raises(ValueError, match="requires satiation_targets"):
+        config.derived_satiation()
+
+
+def test_category_config_derived_helpers() -> None:
+    diversity = {
+        "essentials": CategoryDiversityConfig(weight=0.3, min_multiplier=1.0, max_multiplier=1.2)
+    }
+    config = CategoryConfig(
+        essentials=["groceries"],
+        leisure=["parks"],
+        ces_rho={"groceries": 0.6, "parks": 0.4},
+        satiation_mode="direct",
+        satiation_kappa={"groceries": 0.5, "parks": 0.3},
+        diversity=diversity,
+    )
+
+    satiation = config.derived_satiation()
+    assert satiation["groceries"] == pytest.approx(0.5)
+    assert satiation["parks"] == pytest.approx(0.3)
+    rho = config.derived_rho()
+    assert rho == {"groceries": pytest.approx(0.6), "parks": pytest.approx(0.4)}
+    assert config.get_diversity("groceries") is diversity["essentials"]
+
+
+def test_category_config_derived_rho_missing_category() -> None:
+    config = CategoryConfig(
+        essentials=["groceries"],
+        leisure=[],
+        ces_rho={"parks": 0.5},
+    )
+
+    with pytest.raises(ValueError, match="Missing CES rho"):
+        config.derived_rho()
+
+
+def test_leisure_cross_category_rejects_negative_weights() -> None:
+    with pytest.raises(ValueError, match="non-negative"):
+        LeisureCrossCategoryConfig(weights={"arts": -0.5}, elasticity_zeta=1.0)
+
+
+def test_hubs_airports_requires_positive_weights() -> None:
+    with pytest.raises(ValueError, match="must contain positive"):
+        HubsAirportsConfig(hub_mass_weights={"DEN": 0.0}, hub_decay_alpha=0.1, airport_decay_alpha=0.1)
+
+
+def test_corridor_pair_categories_require_pairs() -> None:
+    with pytest.raises(ValueError, match="exactly two"):
+        CorridorConfig(
+            max_paths=1,
+            stop_buffer_m=10.0,
+            detour_cap_min=5.0,
+            pair_categories=[["a"]],
+            walk_decay_alpha=0.1,
+        )
+
+
+def test_aucs_params_helpers(minimal_config_file: Path) -> None:
+    params, _ = load_params(minimal_config_file)
+
+    alphas = params.derived_mode_alphas()
+    assert set(alphas) == {"walk"}
+    mode_config = params.modes["walk"]
+    assert alphas["walk"] == pytest.approx(mode_config.decay_alpha)
+
+    assert params.derived_satiation() == {}
+    assert list(params.iter_time_slice_ids()) == ["peak", "offpeak"]
+
+
+def test_aucs_params_rejects_missing_modes(minimal_config_file: Path) -> None:
+    params_data, _ = load_params(minimal_config_file)
+    payload = params_data.model_dump(mode="python", by_alias=True)
+    payload["nests"][0]["modes"] = ["nonexistent"]
+    with pytest.raises(ValueError, match="undefined modes"):
+        AUCSParams.model_validate(payload)
diff --git a/tests/fixtures/configs/golden_v1.yml b/tests/fixtures/configs/golden_v1.yml
new file mode 100644
index 0000000000000000000000000000000000000000..25b587a9ad16200df88655e03b8b276ebc6b701c
--- /dev/null
+++ b/tests/fixtures/configs/golden_v1.yml
@@ -0,0 +1,95 @@
+grid:
+  hex_size_m: 240
+  isochrone_minutes: [5, 15]
+  search_cap_minutes: 20
+subscores:
+  EA: 30
+  LCA: 15
+  MUHAA: 15
+  JEA: 10
+  MORR: 10
+  CTE: 10
+  SOU: 10
+time_slices:
+  - id: peak
+    weight: 0.5
+    VOT_per_hour: 19
+  - id: offpeak
+    weight: 0.5
+    VOT_per_hour: 14
+modes:
+  walk:
+    name: walk
+    theta_iv: -0.1
+    theta_wait: -0.2
+    theta_walk: -0.3
+    transfer_penalty_min: 0
+    half_life_min: 12
+    beta0: 0
+nests:
+  - id: base
+    modes: [walk]
+    mu: 1.0
+    eta: 1.0
+logit:
+  mu_top: 1.0
+carry_penalty:
+  category_multipliers:
+    groceries: 1.0
+  per_mode_extra_minutes:
+    walk: 0.0
+quality:
+  component_weights:
+    size: 0.6
+    popularity: 0.4
+  z_clip_abs: 2.5
+  opening_hours_bonus_xi: 1.1
+  dedupe_beta_per_km: 0.2
+categories:
+  essentials: [groceries, pharmacies]
+  leisure: [parks]
+  ces_rho:
+    groceries: 0.6
+    pharmacies: 0.5
+    parks: 0.4
+  satiation_mode: direct
+  satiation_kappa: 0.4
+leisure_cross_category:
+  weights:
+    arts: 1.0
+    sports: 0.5
+  elasticity_zeta: 1.2
+hubs_airports:
+  hub_mass_weights:
+    DEN: 1.0
+  hub_decay_alpha: 0.2
+  airport_decay_alpha: 0.15
+jobs_education:
+  university_weight_kappa: 0.6
+  industry_weights:
+    tech: 1.0
+morr:
+  frequent_exposure: 0.2
+  span: 0.3
+  reliability: 0.4
+  redundancy: 0.5
+  micromobility: 0.6
+corridor:
+  max_paths: 2
+  stop_buffer_m: 15.0
+  detour_cap_min: 5.0
+  pair_categories:
+    - [groceries, parks]
+  walk_decay_alpha: 0.1
+  major_hubs: {}
+  chain_weights: {}
+seasonality:
+  comfort_index_default: 0.6
+normalization:
+  mode: metro
+  metro_percentile: 90.0
+  standards: []
+compute:
+  topK_per_category: 6
+  hub_max_minutes: 40
+  cache_dir: cache/v1
diff --git a/tests/fixtures/configs/golden_v2.yml b/tests/fixtures/configs/golden_v2.yml
new file mode 100644
index 0000000000000000000000000000000000000000..1cf523f18384289662a2baa9986cc88e96241dd4
--- /dev/null
+++ b/tests/fixtures/configs/golden_v2.yml
@@ -0,0 +1,97 @@
+grid:
+  hex_size_m: 260
+  isochrone_minutes: [5, 20]
+  search_cap_minutes: 25
+subscores:
+  EA: 28
+  LCA: 17
+  MUHAA: 15
+  JEA: 10
+  MORR: 10
+  CTE: 10
+  SOU: 10
+time_slices:
+  - id: peak
+    weight: 0.55
+    VOT_per_hour: 20
+  - id: offpeak
+    weight: 0.45
+    VOT_per_hour: 13
+modes:
+  walk:
+    name: walk
+    theta_iv: -0.1
+    theta_wait: -0.2
+    theta_walk: -0.3
+    transfer_penalty_min: 0
+    half_life_min: 14
+    beta0: 0
+nests:
+  - id: base
+    modes: [walk]
+    mu: 1.0
+    eta: 1.0
+logit:
+  mu_top: 1.0
+carry_penalty:
+  category_multipliers:
+    groceries: 1.0
+  per_mode_extra_minutes:
+    walk: 0.0
+quality:
+  component_weights:
+    size: 0.55
+    popularity: 0.45
+  z_clip_abs: 2.8
+  opening_hours_bonus_xi: 1.05
+  dedupe_beta_per_km: 0.25
+categories:
+  essentials: [groceries, pharmacies]
+  leisure: [parks]
+  ces_rho:
+    groceries: 0.65
+    pharmacies: 0.55
+    parks: 0.45
+  satiation_mode: direct
+  satiation_kappa: 0.35
+leisure_cross_category:
+  weights:
+    arts: 1.0
+    sports: 0.75
+  elasticity_zeta: 1.3
+hubs_airports:
+  hub_mass_weights:
+    DEN: 0.6
+    LAX: 0.4
+  hub_decay_alpha: 0.22
+  airport_decay_alpha: 0.16
+jobs_education:
+  university_weight_kappa: 0.65
+  industry_weights:
+    tech: 0.8
+    health: 0.2
+morr:
+  frequent_exposure: 0.25
+  span: 0.35
+  reliability: 0.45
+  redundancy: 0.55
+  micromobility: 0.65
+corridor:
+  max_paths: 2
+  stop_buffer_m: 15.0
+  detour_cap_min: 5.0
+  pair_categories:
+    - [groceries, parks]
+  walk_decay_alpha: 0.11
+  major_hubs: {}
+  chain_weights: {}
+seasonality:
+  comfort_index_default: 0.65
+normalization:
+  mode: metro
+  metro_percentile: 88.0
+  standards: []
+compute:
+  topK_per_category: 6
+  hub_max_minutes: 42
+  cache_dir: cache/v2

EOF
)
